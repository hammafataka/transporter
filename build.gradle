plugins {
    id 'java'
    id 'idea'
    id 'groovy'
    id 'jacoco'
    id 'signing'
    id 'java-library'
    id 'maven-publish'
    id 'org.sonarqube' version '4.0.0.2929'
    id 'org.springframework.boot' version '3.5.4'
    id "com.netflix.nebula.release" version "21.0.0"
    id "io.spring.dependency-management" version "1.1.0"
    id 'io.freefair.lombok' version '8.14.2'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
}

group 'dev.mfataka'


repositories {
    mavenCentral()
}
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.92.Final:osx-x86_64'
    implementation "org.jetbrains:annotations:$JETBRAINS_ANNOTATION_VERSION"
    implementation "org.zalando:logbook-core:$ZALANDO_VERSION"
    implementation "org.zalando:logbook-httpclient:$ZALANDO_VERSION"
    implementation "org.zalando:logbook-netty:$ZALANDO_VERSION"
    implementation "io.vavr:vavr:$VAVR_VERSION"
    implementation("org.apache.commons:commons-lang3:$APACHE_COMMONS_VERSION")
    implementation group: 'org.slf4j', name: 'slf4j-api'
    implementation group: 'io.netty', name: 'netty-buffer'


    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation 'io.projectreactor:reactor-test'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

}

test {
    useJUnitPlatform()
}

java {
    withJavadocJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jar {
    enabled = true
}
bootJar {
    enabled = false
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        create(project.name, MavenPublication) {
            group = project.group
            version project.version

            it.artifact(project.tasks.sourcesJar)
            it.artifact(project.tasks.javadocJar)
            it.artifact(project.tasks.jar)

            it.pom.withXml {
                def dependenciesNode = asNode().appendNode("dependencies")
                if (!project.tasks.findByName("shadowJar")) {
                    project.configurations.api.dependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'compile')
                    }
                }
            }

            pom {
                name = "transporter"
                description = 'Wrapper for spring webclient, making easier configurations and resuing them'
                url = 'https://mfataka.dev'
                licenses {
                    license {
                        name = 'GPL-3.0 License'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'mfataka'
                        name = 'Mohammed Fataka'
                        email = 'hammafataka@yahoo.fom'
                    }
                }
                scm {
                    connection = 'scm:git:github.com/hammafataka/transporter.git'
                    developerConnection = 'scm:git:ssh://github.com/hammafataka/transporter.git'
                    url = 'https://github.com/hammafataka/transporter/tree/main'
                }
            }
        }
    }
    repositories {
        maven { ->

            def repoEnv = System.getenv('GITHUB_REPOSITORY') // e.g. "hammafataka/transporter"
            def (owner, repo) = (repoEnv ?: 'hammafataka/transproter').toLowerCase().split('/')
            name = "GitHubPackages"

            url = uri("https://maven.pkg.github.com/${owner}/${repo}")

            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
test {
    jacoco {
        destinationFile = layout.buildDirectory.file("jacoco/jacocoTest.exec").get().asFile
        classDumpDir = layout.buildDirectory.file("jacoco/classpathdumps").get().asFile
    }
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = false
    }
}

jacoco {
    toolVersion = "0.8.8"
}
nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
            username = System.getenv('OSSRH_USERNAME')
            password = System.getenv('OSSRH_PASSWORD')
        }
    }
}

signing {
    def key = System.getenv('SIGNING_KEY')
    def pass = System.getenv('SIGNING_PASSWORD')
    useInMemoryPgpKeys(key, pass)
    sign publishing.publications
}


sonar {
    properties {
        property "sonar.projectKey", "transporter"
        property "sonar.coveragePlugin", "jacoco"
        property "sonar.qualitygate.wait", true
        property "sonar.jacoco.xmlReportPaths", layout.buildDirectory.dir("/reports/jacoco/test/").get()
        property "sonar.host.url", System.getenv().getOrDefault("SONAR_HOST_URL", "")
        property "sonar.dependencyCheck.htmlReportPath", layout.buildDirectory.dir("/reports/dependencyCheck/dependency-check-report.html").get()
    }
}