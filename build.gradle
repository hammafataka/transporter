plugins {
    id 'java'
    id 'idea'
    id 'groovy'
    id 'jacoco'
    id 'application'
    id 'java-library'
    id 'maven-publish'
    id 'org.sonarqube' version '4.0.0.2929'
    id 'org.springframework.boot' version '3.1.3'
    id "nebula.release" version "17.1.0" apply false
    id "io.spring.dependency-management" version "1.1.0"
    id 'com.google.cloud.tools.jib' version '3.3.1' apply false
    id "io.freefair.lombok" version "8.3"
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'java-library'
apply plugin: 'org.sonarqube'
apply plugin: "nebula.release"
apply plugin: 'nebula.release'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'dev.mfataka'


repositories {
    mavenCentral()
}
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.92.Final:osx-x86_64'
    implementation "org.jetbrains:annotations:$JETBRAINS_ANNOTATION_VERSION"
    implementation "org.zalando:logbook-core:$ZALANDO_VERSION"
    implementation "org.zalando:logbook-httpclient:$ZALANDO_VERSION"
    implementation "org.zalando:logbook-netty:$ZALANDO_VERSION"
    implementation "io.vavr:vavr:$VAVR_VERSION"
    implementation("org.apache.commons:commons-lang3:$APACHE_COMMONS_VERSION")
    implementation group: 'org.slf4j', name: 'slf4j-api'
    implementation group: 'io.netty', name: 'netty-buffer'


    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation 'io.projectreactor:reactor-test'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

}

test {
    useJUnitPlatform()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jar {
    enabled = true
}
bootJar {
    enabled = false
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact(tasks.sourcesJar)
            version = project.version

            from components.java
            afterEvaluate {
                artifactId = project.name
            }
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'transporter'
                description = 'transporter library for transport'
                inceptionYear.set("2023")
                organization {
                    name.set("MFataka")
                    url.set("https://mfataka.dev/")
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'mfataka'
                        name = 'Mohammed Fataka'
                        email = 'hammafataka@yahoo.com'
                    }
                }
                contributors {
                    name = 'Mohammed Fataka'
                }
            }

        }
    }
    repositories {
        maven({ MavenArtifactRepository repository ->

            final evn = System.getenv()
            repository.url = evn.getOrDefault("NEXUS_URL_RELEASE", "")

            repository.credentials {
                username = evn.getOrDefault("NEXUS_USERNAME", "")
                password = evn.getOrDefault("NEXUS_PASSWORD", "")
            }
        })
    }
}
test {
    jacoco {
        destinationFile = layout.buildDirectory.file("jacoco/jacocoTest.exec").get().asFile
        classDumpDir = layout.buildDirectory.file("jacoco/classpathdumps").get().asFile
    }
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = false
    }
}

jacoco {
    toolVersion = "0.8.8"
}


sonar {
    properties {
        property "sonar.projectKey", "epa-transporter"
        property "sonar.coveragePlugin", "jacoco"
        property "sonar.qualitygate.wait", true
        property "sonar.jacoco.xmlReportPaths", layout.buildDirectory.dir("/reports/jacoco/test/").get()
        property "sonar.host.url", System.getenv().getOrDefault("SONAR_HOST_URL", "")
        property "sonar.dependencyCheck.htmlReportPath", layout.buildDirectory.dir("/reports/dependencyCheck/dependency-check-report.html").get()
    }
}